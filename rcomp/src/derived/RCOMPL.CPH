/* t:\mks\bin\lex -a -T -LC -P t:/mks/etc/yylex.cpp -o rcompl.cph -D rcompl.hpp ../rcomp.l */
#define INITIAL 0
#define string_rules 2
#define file_line_rules 4
#define cpp_comment 6
#define c_comment 8
const yy_endst = 191;
const yy_nxtmax = 1933;
#define YY_LA_SIZE 24

static unsigned short yy_la_act[] = {
 38, 61, 38, 61, 38, 61, 38, 61, 38, 61, 38, 61, 38, 61, 38, 61,
 38, 61, 38, 61, 38, 61, 38, 61, 38, 61, 27, 61, 28, 61, 38, 61,
 38, 61, 39, 61, 39, 61, 60, 61, 52, 61, 52, 60, 61, 60, 61, 61,
 53, 56, 46, 44, 42, 39, 45, 43, 41, 40, 38, 38, 38, 38, 38, 38,
 17, 38, 19, 38, 38, 21, 38, 38, 38, 38, 38, 16, 38, 38, 38, 13,
 38, 38, 38, 38, 14, 38, 10, 38, 11, 38, 38, 12, 38, 38, 38, 9,
 38, 38, 38, 8, 38, 38, 38, 38, 38, 38, 26, 38, 38, 38, 24, 38,
 38, 23, 38, 38, 38, 18, 38, 20, 38, 38, 22, 38, 38, 38, 15, 38,
 38, 7, 38, 38, 38, 38, 38, 6, 38, 38, 38, 38, 38, 4, 38, 38,
 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 3, 38, 38, 38, 2, 38,
 38, 38, 38, 38, 38, 38, 1, 38, 38, 38, 38, 38, 38, 38, 25, 38,
 38, 38, 38, 5, 38, 38, 38, 38, 0, 38, 61, 47, 37, 61, 34, 35,
 37, 61, 36, 37, 61, 37, 61, 29, 30, 31, 32, 33, 61, 61, 52, 61,
 52, 61, 56, 53, 1073, 2099, 1586, 560, 1073, 54, 55, 61, 59, 61, 58, 59,
 61, 57, 0
};

static unsigned char yy_look[] = {
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00,
 0
};

static short yy_final[] = {
 0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,
 30, 32, 34, 36, 38, 40, 42, 43, 45, 47, 48, 49, 50, 50, 50, 50,
 51, 52, 52, 53, 54, 54, 54, 55, 56, 56, 57, 57, 58, 59, 60, 61,
 62, 63, 64, 66, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82,
 83, 84, 86, 88, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104,
 105, 106, 108, 109, 110, 112, 113, 115, 116, 117, 119, 121, 122, 124, 125, 126,
 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146,
 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164,
 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183,
 184, 186, 186, 187, 187, 187, 187, 188, 188, 190, 191, 194, 197, 199, 200, 201,
 202, 203, 204, 204, 205, 206, 208, 209, 210, 210, 211, 212, 212, 213, 213, 213,
 213, 214, 214, 214, 215, 215, 215, 217, 217, 218, 220, 220, 222, 223, 225, 226

};
#ifndef yy_state_t
#define yy_state_t unsigned char
#endif

static yy_state_t yy_begin[] = {
 0, 145, 151, 151, 162, 162, 183, 183, 186, 186, 0
};

static yy_state_t yy_next[] = {
 25, 25, 25, 25, 25, 25, 25, 25, 25, 21, 22, 25, 25, 25, 25, 25,
 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 21, 25, 14, 25, 25, 25, 25, 15, 24, 24, 24, 24, 24, 20, 24, 23,
 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 25, 24, 24, 24, 24, 25,
 25, 17, 10, 4, 12, 8, 17, 6, 17, 17, 17, 17, 7, 17, 3, 5,
 17, 17, 2, 1, 13, 17, 17, 11, 17, 17, 17, 24, 25, 24, 25, 25,
 25, 16, 16, 16, 16, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 25, 25,
 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 27, 29, 42, 48, 49, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
 33, 40, 50, 53, 54, 55, 56, 57, 30, 31, 31, 31, 31, 31, 31, 31,
 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 52, 58, 59,
 33, 40, 60, 61, 51, 64, 65, 66, 30, 34, 34, 34, 34, 34, 34, 34,
 34, 34, 34, 36, 69, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 38,
 38, 38, 38, 38, 38, 38, 38, 38, 38, 70, 37, 39, 39, 39, 39, 39,
 39, 39, 39, 39, 39, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 43,
 43, 43, 43, 43, 43, 43, 43, 43, 43, 62, 37, 71, 72, 63, 73, 68,
 43, 43, 43, 43, 43, 43, 67, 74, 75, 81, 82, 83, 84, 85, 86, 87,
 88, 89, 92, 95, 93, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 94,
 43, 43, 43, 43, 43, 43, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 96, 97, 98, 99, 47, 100, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
 80, 91, 101, 102, 78, 103, 104, 79, 90, 105, 76, 106, 107, 108, 109, 77,
 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
 126, 127, 128, 129, 132, 133, 130, 134, 135, 136, 137, 131, 138, 139, 140, 141,
 142, 143, 144, 146, 147, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 149,
 150, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 153, 156, 156, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
 156, 156, 156, 154, 156, 156, 156, 156, 155, 156, 156, 156, 156, 156, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 152, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
 156, 161, 172, 174, 175, 176, 178, 176, 181, 179, 179, 168, 168, 168, 168, 168,
 168, 168, 168, 168, 168, 168, 182, 190, 173, 157, 168, 177, 191, 191, 158, 180,
 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
 191, 191, 191, 160, 191, 191, 191, 191, 191, 159, 191, 191, 191, 159, 191, 191,
 191, 191, 191, 191, 191, 159, 191, 191, 191, 159, 191, 159, 191, 159, 164, 164,
 164, 164, 164, 164, 164, 164, 164, 165, 166, 164, 164, 164, 164, 164, 164, 164,
 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 165, 164,
 163, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 167, 164, 164,
 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 168, 168,
 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
 171, 168, 168, 168, 168, 168, 168, 168, 169, 168, 168, 168, 168, 170, 168, 168,
 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 185, 184, 185, 185, 185, 185, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 188, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 187, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 0
};

static yy_state_t yy_check[] = {
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 23, 28, 18, 13, 48, 23, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
 32, 39, 49, 52, 12, 54, 55, 56, 28, 30, 30, 30, 30, 30, 30, 30,
 30, 30, 30, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 50, 57, 11,
 32, 39, 59, 60, 50, 63, 64, 62, 28, 33, 33, 33, 33, 33, 33, 33,
 33, 33, 33, 19, 68, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 37,
 37, 37, 37, 37, 37, 37, 37, 37, 37, 9, 19, 36, 36, 36, 36, 36,
 36, 36, 36, 36, 36, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 10, 19, 70, 71, 10, 8, 66,
 42, 42, 42, 42, 42, 42, 66, 73, 74, 80, 79, 82, 83, 78, 85, 77,
 87, 88, 91, 94, 76, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 76,
 42, 42, 42, 42, 42, 42, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
 93, 96, 6, 98, 17, 99, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
 7, 89, 100, 101, 7, 5, 103, 7, 89, 104, 7, 105, 106, 4, 108, 7,
 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 3, 120, 121, 2, 123, 124,
 125, 126, 127, 128, 1, 132, 1, 133, 134, 135, 131, 1, 137, 138, 139, 130,
 141, 142, 143, 145, 146, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 148,
 149, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
 151, 152, 171, 173, 173, 175, 177, 178, 180, 174, 181, 170, 169, 168, 166, 165,
 170, 169, 168, 166, 165, 164, 163, 187, 171, 152, 164, 175, ~0, ~0, 152, 174,
 ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0,
 ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0,
 ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0,
 ~0, ~0, ~0, 152, ~0, ~0, ~0, ~0, ~0, 152, ~0, ~0, ~0, 152, ~0, ~0,
 ~0, ~0, ~0, ~0, ~0, 152, ~0, ~0, ~0, 152, ~0, 152, ~0, 152, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 183, 183,
 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 0
};

static yy_state_t yy_default[] = {
 191, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 191, 191,
 17, 191, 19, 191, 191, 191, 191, 191, 191, 191, 191, 191, 20, 191, 191, 30,
 29, 191, 33, 19, 191, 191, 37, 36, 191, 40, 191, 42, 17, 17, 17, 17,
 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
 17, 0, 191, 191, 147, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
 191, 191, 191, 171, 167, 167, 167, 191, 167, 167, 167, 191, 191, 191, 191, 191,
 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 0

};

static short yy_base[] = {
 0, 434, 440, 441, 421, 415, 374, 411, 304, 235, 292, 224, 197, 190, 1934, 1934,
 1934, 357, 138, 277, 214, 1934, 1934, 214, 1934, 1934, 1934, 1934, 211, 243, 233, 1934,
 203, 265, 1934, 1934, 299, 287, 1934, 204, 309, 1934, 319, 1934, 1934, 1934, 1934, 1934,
 172, 190, 252, 1934, 221, 1934, 192, 212, 203, 233, 1934, 224, 239, 1934, 241, 225,
 241, 1934, 334, 1934, 270, 1934, 262, 271, 1934, 306, 315, 1934, 337, 330, 319, 321,
 315, 1934, 317, 321, 1934, 323, 1934, 312, 317, 432, 1934, 348, 1934, 383, 332, 1934,
 373, 1934, 372, 387, 417, 407, 1934, 416, 406, 422, 408, 1934, 429, 414, 432, 431,
 415, 431, 419, 407, 420, 435, 421, 1934, 430, 439, 1934, 427, 432, 427, 431, 447,
 446, 1934, 445, 439, 441, 446, 442, 446, 1934, 440, 456, 449, 1934, 443, 462, 446,
 1934, 496, 500, 485, 511, 510, 1934, 545, 791, 1934, 1934, 1934, 1934, 1934, 1934, 1934,
 1934, 1934, 910, 812, 779, 773, 772, 1166, 771, 770, 769, 792, 1934, 754, 799, 795,
 1934, 755, 797, 1934, 757, 800, 1934, 1422, 1934, 1934, 1678, 776, 1934, 1934, 1934, 1934

};


#line 148 "t:/mks/etc/yylex.cpp"

// MKS LEX prototype scanner code
// Copyright 1991 by Mortice Kern Systems Inc.
// All rights reserved.

// You can redefine YY_INTERACTIVE to be 0 to get a very slightly
// faster scanner:
#ifndef YY_INTERACTIVE
#define	YY_INTERACTIVE	1
#endif

// You can compile with -DYY_DEBUG to get a print trace of the scanner
#ifdef YY_DEBUG
#undef YY_DEBUG
#define YY_DEBUG(fmt,a1,a2)	fprintf(stderr,fmt,a1,a2)
#else
#define YY_DEBUG(fmt,a1,a2)
#endif

const MIN_NUM_STATES = 20;

// Do *NOT* redefine the following:
#define	BEGIN		yy_start =
#define	REJECT		goto yy_reject
#define	yymore()	goto yy_more

#line 1 "../rcomp.l"

// RCOMPL.CPP
// Generated from RCOMP.L
//
// Copyright (c) 1997-1999 Symbian Ltd.  All rights reserved.
//

#include <limits.h>
#include "structst.h"
#include "rcompl.hpp"
#include "rcomp.hpp"
#include "fileline.h"

#define VALUE_LEN   1024	// must match sizeof(YYSTYPE.Value)
char buf[VALUE_LEN];
char * pCh;
#define CHECK_APPEND(x)	\
    if (pCh-buf==VALUE_LEN-1) { yyerror("string too long - %c ignored", (x)); } else {*pCh++ = (x); }

int isCharLiteral;

YYSTYPE yylval;

extern String		InputBaseName;
extern FileLineManager* pFileLineHandler;
extern int*		pCurrentLineNumber;
char RealLineNumber[200];


#line 174 "t:/mks/etc/yylex.cpp"


// Constructor for yy_scan. Set up tables
/*
#pragma argsused
*/
yy_scan::yy_scan(int sz, char* buf, char* sv, yy_state_t* states)
{
	mustfree = 0;
	if ((size = sz) < MIN_NUM_STATES
	  || (yytext = buf) == 0
	  || (state = states) == 0) {
		yyerror("Bad space for scanner!");
		exit(1);
	}
#ifdef YY_PRESERVE
	save = sv;
#endif
}
// Constructor for yy_scan. Set up tables
yy_scan::yy_scan(int sz)
{
	size = sz;
	yytext = new char[sz+1];	// text buffer
	state = new yy_state_t[sz+1];	// state buffer
#ifdef YY_PRESERVE
	save = new char[sz];	// saved yytext[]
	push = save + sz;
#endif
	if (yytext == NULL
#ifdef YY_PRESERVE
	  || save == NULL
#endif
	  || state == NULL) {
		yyerror("No space for scanner!");
		exit(1);
	}
	mustfree = 1;
	yy_end = 0;
	yy_start = 0;
	yy_lastc = YYNEWLINE;
	yyin = stdin;
	yyout = stdout;
	yylineno = 1;
	yyleng = 0;
}

// Descructor for yy_scan
yy_scan::~yy_scan()
{
	if (mustfree) {
		mustfree = 0;
		delete(yytext);
		delete(state);
#ifdef YY_PRESERVE
		delete(save);
#endif
	}
}

// Print error message, showing current line number
void
yy_scan::yyerror(char *fmt, ...)
{
	va_list va;

	va_start(va, fmt);
#ifdef LEX_WINDOWS
	// Windows has no concept of a standard error output!
	// send output to yyout as a simple solution
	if (yylineno)
		fprintf(yyout, "%d: ", yylineno);
	(void) vfprintf(yyout, fmt, va);
	fputc('\n', yyout);
#else /* LEX_WINDOWS */
	if (yylineno)
		fprintf(stderr, "%d: ", yylineno);
	(void) vfprintf(stderr, fmt, va);
	fputc('\n', stderr);
#endif /* LEX_WINDOWS */
	va_end(va);
}


#ifdef LEX_WINDOWS

// The initial portion of the lex scanner
// In an windows environment, it will load the desired
// resources, obtain pointers to them, and then call
// the protected member win_yylex() to acutally begin the
// scanning. When complete, win_yylex() will return a
// value back to our new yylex() function, which will 
// record that value temporarily, release the resources
// from global memory, and finally return the value
// back to the caller of yylex().

int
yy_scan::yylex()
{
	int wReturnValue;
	HANDLE hRes_table;
	unsigned short *old_yy_la_act;	// remember previous pointer values
	short *old_yy_final;
	yy_state_t *old_yy_begin;
	yy_state_t *old_yy_next;
	yy_state_t *old_yy_check;
	yy_state_t *old_yy_default;
	short *old_yy_base;

	// the following code will load the required
	// resources for a Windows based parser. 

	hRes_table = LoadResource (hInst,
		FindResource (hInst, "UD_RES_yyLEX", "yyLEXTBL"));
	
	// return an error code if any
	// of the resources did not load 

	if (hRes_table == (HANDLE)NULL) 
		return (0);
	
	// the following code will lock the resources
	// into fixed memory locations for the scanner
	// (remember previous pointer locations)

	old_yy_la_act = yy_la_act;
	old_yy_final = yy_final;
	old_yy_begin = yy_begin;
	old_yy_next = yy_next;
	old_yy_check = yy_check;
	old_yy_default = yy_default;
	old_yy_base = yy_base;

	yy_la_act = (unsigned short *)LockResource (hRes_table);
	yy_final = (short *)(yy_la_act + Sizeof_yy_la_act);
	yy_begin = (yy_state_t *)(yy_final + Sizeof_yy_final);
	yy_next = (yy_state_t *)(yy_begin + Sizeof_yy_begin);
	yy_check = (yy_state_t *)(yy_next + Sizeof_yy_next);
	yy_default = (yy_state_t *)(yy_check + Sizeof_yy_check);
	yy_base = (short *)(yy_default + Sizeof_yy_default);


	// call the standard yylex() code

	wReturnValue = win_yylex();

	// unlock the resources

	UnlockResource (hRes_table);

	// and now free the resource

	FreeResource (hRes_table);

	//
	// restore previously saved pointers
	//

	yy_la_act = old_yy_la_act;
	yy_final = old_yy_final;
	yy_begin = old_yy_begin;
	yy_next = old_yy_next;
	yy_check = old_yy_check;
	yy_default = old_yy_default;
	yy_base = old_yy_base;

	return (wReturnValue);
}	// end yylex()

// The actual lex scanner
// yy_sbuf[0:yyleng-1] contains the states corresponding to yytext.
// yytext[0:yyleng-1] contains the current token.
// yytext[yyleng:yy_end-1] contains pushed-back characters.
// When the user action routine is active,
// save contains yytext[yyleng], which is set to '\0'.
// Things are different when YY_PRESERVE is defined. 

int 
yy_scan::win_yylex()

#else /* LEX_WINDOWS */

// The actual lex scanner
// yy_sbuf[0:yyleng-1] contains the states corresponding to yytext.
// yytext[0:yyleng-1] contains the current token.
// yytext[yyleng:yy_end-1] contains pushed-back characters.
// When the user action routine is active,
// save contains yytext[yyleng], which is set to '\0'.
// Things are different when YY_PRESERVE is defined. 
int
yy_scan::yylex()
#endif /* LEX_WINDOWS */

{
	int c, i, yybase;
	unsigned  yyst;		/* state */
	int yyfmin, yyfmax;	/* yy_la_act indices of final states */
	int yyoldi, yyoleng;	/* base i, yyleng before look-ahead */
	int yyeof;		/* 1 if eof has already been read */

#line 373 "t:/mks/etc/yylex.cpp"


#ifdef YYEXIT
	yyLexFatal = 0;
#endif
	yyeof = 0;
	i = yyleng;
	YY_SCANNER();

  yy_again:
	if ((yyleng = i) > 0) {
		yy_lastc = yytext[i-1];	// determine previous char
		while (i > 0)	//	// scan previously token
			if (yytext[--i] == YYNEWLINE)	// fix yylineno
				yylineno++;
	}
	yy_end -= yyleng;		// adjust pushback
	memmove(yytext, yytext+yyleng, (size_t) yy_end);
	i = 0;

  yy_contin:
	yyoldi = i;

	/* run the state machine until it jams */
	yyst = yy_begin[yy_start + (yy_lastc == YYNEWLINE)];
	state[i] = (yy_state_t) yyst;
	do {
		YY_DEBUG("<state %d, i = %d>\n", yyst, i);
		if (i >= size) {
			YY_FATAL("Token buffer overflow");
#ifdef YYEXIT
			if (yyLexFatal)
				return -2;
#endif
		}	/* endif */

		/* get input char */
		if (i < yy_end)
			c = yytext[i];		/* get pushback char */
		else if (!yyeof && (c = yygetc()) != EOF) {
			yy_end = i+1;
			yytext[i] = c;
		} else /* c == EOF */ {
			c = EOF;		/* just to make sure... */
			if (i == yyoldi) {	/* no token */
				yyeof = 0;
				if (yywrap())
					return 0;
				else
					goto yy_again;
			} else {
				yyeof = 1;	/* don't re-read EOF */
				break;
			}
		}
		YY_DEBUG("<input %d = 0x%02x>\n", c, c);

		/* look up next state */
		while ((yybase = yy_base[yyst]+(unsigned char)c) > yy_nxtmax
		    || yy_check[yybase] != (yy_state_t) yyst) {
			if (yyst == yy_endst)
				goto yy_jammed;
			yyst = yy_default[yyst];
		}
		yyst = yy_next[yybase];
	  yy_jammed: ;
	     state[++i] = (yy_state_t) yyst;
	} while (!(yyst == yy_endst || YY_INTERACTIVE &&
		yy_base[yyst] > yy_nxtmax && yy_default[yyst] == yy_endst));

	YY_DEBUG("<stopped %d, i = %d>\n", yyst, i);
	if (yyst != yy_endst)
		++i;

  yy_search:
	/* search backward for a final state */
	while (--i > yyoldi) {
		yyst = state[i];
		if ((yyfmin = yy_final[yyst]) < (yyfmax = yy_final[yyst+1]))
			goto yy_found;	/* found final state(s) */
	}
	/* no match, default action */
	i = yyoldi + 1;
	output(yytext[yyoldi]);
	goto yy_again;

  yy_found:
	YY_DEBUG("<final state %d, i = %d>\n", yyst, i);
	yyoleng = i;		/* save length for REJECT */
	
	// pushback look-ahead RHS, handling trailing context
	if ((c = (int)(yy_la_act[yyfmin]>>9) - 1) >= 0) {
		unsigned char *bv = yy_look + c*YY_LA_SIZE;
		static unsigned char bits [8] = {
			1<<0, 1<<1, 1<<2, 1<<3, 1<<4, 1<<5, 1<<6, 1<<7
		};
		while (1) {
			if (--i < yyoldi) {	/* no / */
				i = yyoleng;
				break;
			}
			yyst = state[i];
			if (bv[(unsigned)yyst/8] & bits[(unsigned)yyst%8])
				break;
		}
	}

	/* perform action */
	yyleng = i;
	YY_USER();
	switch (yy_la_act[yyfmin] & 0777) {
	case 0:
#line 60 "../rcomp.l"
	return L_STRUCT;
	break;
	case 1:
#line 61 "../rcomp.l"
	return L_RESOURCE;
	break;
	case 2:
#line 62 "../rcomp.l"
	return L_NAME;
	break;
	case 3:
#line 63 "../rcomp.l"
	return L_CHARACTER_SET;
	break;
	case 4:
#line 64 "../rcomp.l"
	return L_OFFSET;
	break;
	case 5:
#line 65 "../rcomp.l"
	return L_SYSTEM;
	break;
	case 6:
#line 66 "../rcomp.l"
	return L_GLOBAL;
	break;
	case 7:
#line 67 "../rcomp.l"
	return L_LOCAL;
	break;
	case 8:
#line 68 "../rcomp.l"
	return L_ENUM;
	break;
	case 9:
#line 69 "../rcomp.l"
	return L_ENUM;
	break;
	case 10:
#line 75 "../rcomp.l"
	return L_BUF;
	break;
	case 11:
#line 76 "../rcomp.l"
	return L_BUF8;
	break;
	case 12:
#line 77 "../rcomp.l"
	return L_BUF16;
	break;
	case 13:
#line 78 "../rcomp.l"
	return L_WORD;
	break;
	case 14:
#line 79 "../rcomp.l"
	return L_BYTE;
	break;
	case 15:
#line 80 "../rcomp.l"
	return L_LONG;
	break;
	case 16:
#line 81 "../rcomp.l"
	return L_DOUBLE;
	break;
	case 17:
#line 82 "../rcomp.l"
	return L_TEXT;
	break;
	case 18:
#line 83 "../rcomp.l"
	return L_LTEXT;
	break;
	case 19:
#line 84 "../rcomp.l"
	return L_TEXT8;
	break;
	case 20:
#line 85 "../rcomp.l"
	return L_LTEXT8;
	break;
	case 21:
#line 86 "../rcomp.l"
	return L_TEXT16;
	break;
	case 22:
#line 87 "../rcomp.l"
	return L_LTEXT16;
	break;
	case 23:
#line 88 "../rcomp.l"
	return L_LINK;
	break;
	case 24:
#line 89 "../rcomp.l"
	return L_LLINK;
	break;
	case 25:
#line 90 "../rcomp.l"
	return L_SRLINK;
	break;
	case 26:
#line 96 "../rcomp.l"
	return L_LEN;
	break;
	case 27:
#line 102 "../rcomp.l"
	{ BEGIN(string_rules); pCh = buf; isCharLiteral=0; }
	break;
	case 28:
#line 103 "../rcomp.l"
	{ BEGIN(string_rules); pCh = buf; isCharLiteral=1; }
	break;
	case 29:
#line 106 "../rcomp.l"
	{ CHECK_APPEND('"'); }
	break;
	case 30:
#line 107 "../rcomp.l"
	{ CHECK_APPEND('\''); };
	break;
	case 31:
#line 110 "../rcomp.l"
	{ CHECK_APPEND( * ( strchr("\rr\bb\ff\nn\tt\vv\aa", yytext[1])-1));}
	break;
	case 32:
#line 113 "../rcomp.l"
	{ CHECK_APPEND('\\'); }
	break;
	case 33:
#line 115 "../rcomp.l"
	;
	break;
	case 34:
#line 118 "../rcomp.l"
	{ yyerror( isCharLiteral?"Unterminated character literal":"Unterminated string"); BEGIN 0; }
	break;
	case 35:
#line 121 "../rcomp.l"
	{ 
    if (!isCharLiteral) 
	    {
	    *pCh = '\0'; BEGIN(0); strcpy( yylval.Value, buf); return L_STRING_LITERAL;
	    }
    CHECK_APPEND(*yytext);
    }
	break;
	case 36:
#line 129 "../rcomp.l"
	{ 
    if (isCharLiteral) 
	    {
	    *pCh = '\0'; BEGIN(0); strcpy( yylval.Value, buf); return L_CHAR_LITERAL;
	    }
    CHECK_APPEND(*yytext);
    }
	break;
	case 37:
#line 138 "../rcomp.l"
	{ CHECK_APPEND(*yytext); }
	break;
	case 38:
#line 144 "../rcomp.l"
	{	
    BEGIN(0);
    strcpy( yylval.Value, yytext);
    return L_LABEL;
    }
	break;
	case 39:
#line 153 "../rcomp.l"
	{	strcpy( yylval.Value, yytext); return L_NUM_NATURAL; }
	break;
	case 40:
#line 154 "../rcomp.l"
	{	strcpy( yylval.Value, yytext); return L_NUM_NATURAL; }
	break;
	case 41:
#line 155 "../rcomp.l"
	{	strcpy( yylval.Value, yytext); return L_NUM_FLOAT;}
	break;
	case 42:
#line 156 "../rcomp.l"
	{	strcpy( yylval.Value, yytext); return L_NUM_FLOAT;}
	break;
	case 43:
#line 157 "../rcomp.l"
	{	strcpy( yylval.Value, yytext); return L_NUM_FLOAT;}
	break;
	case 44:
#line 158 "../rcomp.l"
	{	strcpy( yylval.Value, yytext); return L_NUM_FLOAT;}
	break;
	case 45:
#line 159 "../rcomp.l"
	{	strcpy( yylval.Value, yytext); return L_NUM_FLOAT;}
	break;
	case 46:
#line 160 "../rcomp.l"
	{	strcpy( yylval.Value, yytext); return L_NUM_FLOAT;}
	break;
	case 47:
#line 165 "../rcomp.l"
	{	BEGIN( file_line_rules); strcpy( RealLineNumber, yytext+2); }
	break;
	case 48:
#line 167 "../rcomp.l"
	{	BEGIN(0); // # <line> "" means start of base file.
											pFileLineHandler->SetBase( InputBaseName, * pCurrentLineNumber);
										}
										
	break;
	case 49:
#line 171 "../rcomp.l"
	{	BEGIN(0); // # <line> <filename> means start of named base file.
											pFileLineHandler->SetInclude( yytext, * pCurrentLineNumber);
										}
	break;
	case 50:
#line 175 "../rcomp.l"
	{
											BEGIN(0); // # <line> <filename> 1 means start of an included file.
											pFileLineHandler->SetInclude( yytext, * pCurrentLineNumber);
										}
	break;
	case 51:
#line 180 "../rcomp.l"
	{
											BEGIN(0); // # <line> <filename> 2 means end of an included file and now at <line> in <filename>.
											pFileLineHandler->PostInclude( yytext, RealLineNumber, * pCurrentLineNumber);
										}
	break;
	case 52:
#line 190 "../rcomp.l"
	; // skipped
	break;
	case 53:
#line 192 "../rcomp.l"
	{ BEGIN(cpp_comment); }
	break;
	case 54:
#line 193 "../rcomp.l"
	{ BEGIN(0); }
	break;
	case 55:
#line 194 "../rcomp.l"
	; // skipped
	break;
	case 56:
#line 196 "../rcomp.l"
	{ BEGIN(c_comment); }
	break;
	case 57:
#line 197 "../rcomp.l"
	{ BEGIN(0); }
	break;
	case 58:
#line 198 "../rcomp.l"
	; // skipped
	break;
	case 59:
#line 199 "../rcomp.l"
	; // skipped
	break;
	case 60:
#line 204 "../rcomp.l"
	return * yytext;
	break;
	case 61:
#line 210 "../rcomp.l"
	{ yyerror("*** Unknown character '%c' (value 0x%x) ", *yytext, *yytext);}
	break;

#line 484 "t:/mks/etc/yylex.cpp"

	}
	YY_SCANNER();
	i = yyleng;
	goto yy_again;			/* action fell though */

  yy_reject:
	YY_SCANNER();
	i = yyoleng;			/* restore original yytext */
	if (++yyfmin < yyfmax)
		goto yy_found;		/* another final state, same length */
	else
		goto yy_search;		/* try shorter yytext */

  yy_more:
	YY_SCANNER();
	i = yyleng;
	if (i > 0)
		yy_lastc = yytext[i-1];
	goto yy_contin;
}

/*
 * user callable input/unput functions.
 */
void
yy_scan::yy_reset()
{
	YY_INIT();
	yylineno = 1;
}
/* get input char with pushback */
int
yy_scan::input()
{
	int c;
#ifndef YY_PRESERVE
	if (yy_end > yyleng) {
		yy_end--;
		memmove(yytext+yyleng, yytext+yyleng+1,
			(size_t) (yy_end-yyleng));
		c = save;
		YY_USER();
#else
	if (push < save+size) {
		c = *push++;
#endif
	} else
		c = yygetc();
	yy_lastc = c;
	if (c == YYNEWLINE)
		yylineno++;
	return c;
}

/* pushback char */
int
yy_scan::unput(int c)
{
#ifndef YY_PRESERVE
	if (yy_end >= size) {
		YY_FATAL("Push-back buffer overflow");
	} else {
		if (yy_end > yyleng) {
			yytext[yyleng] = save;
			memmove(yytext+yyleng+1, yytext+yyleng,
				(size_t) (yy_end-yyleng));
			yytext[yyleng] = 0;
		}
		yy_end++;
		save = c;
#else
	if (push <= save) {
		YY_FATAL("Push-back buffer overflow");
	} else {
		*--push = c;
#endif
		if (c == YYNEWLINE)
			yylineno--;
	}	/* endif */
	return c;
}

